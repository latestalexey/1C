&НаКлиенте
Процедура УправлениеИнтерфейсом()
	Элементы.Страница_Настройки.Видимость						= ПоказатьНастройки;
	Элементы.НастройкиЛогическихКассСкладКассы.Видимость		= ПоказатьНастройки;
	Элементы.НастройкиЛогическихКассКаталогОбмена.Видимость		= ПоказатьНастройки;
	Элементы.НастройкиЛогическихКассФайлВыгрузки.Видимость		= ПоказатьНастройки;
	Элементы.НастройкиЛогическихКассФайлЗагрузки.Видимость		= ПоказатьНастройки;
	Элементы.НастройкиЛогическихКассФлагВыгрузки.Видимость		= ПоказатьНастройки;
	Элементы.НастройкиЛогическихКассФорматОбмена.Видимость		= ПоказатьНастройки;
	Элементы.НастройкиЛогическихКасс.ИзменятьСоставСтрок		= ПоказатьНастройки;
	Элементы.НастройкиЛогическихКассНаименование.Доступность	= ПоказатьНастройки;
	КонецПроцедуры

&НаКлиенте
Процедура НастройкиЛогическихКассКаталогОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДиалогВыбора	= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбора.Каталог	= Элементы.НастройкиЛогическихКасс.ТекущиеДанные.КаталогОбмена;
	ДиалогВыбора.Заголовок	= "Каталог обмена с " + Элементы.НастройкиЛогическихКасс.ТекущиеДанные.Наименование;
	
	Если ДиалогВыбора.Выбрать() Тогда
		Элементы.НастройкиЛогическихКасс.ТекущиеДанные.КаталогОбмена	= ДиалогВыбора.Каталог;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	УправлениеИнтерфейсом();
	Элементы.НастройкиЛогическихКассФорматОбмена.СписокВыбора.Добавить("Frontol Win32 v.4.x");
	Элементы.НастройкиЛогическихКассФорматОбмена.СписокВыбора.Добавить("Атол РМК");
	Элементы.НастройкиЛогическихКассФорматОбмена.СписокВыбора.Добавить("Frontol v.5");
	Элементы.НастройкиЛогическихКассФорматОбмена.СписокВыбора.Добавить("Frontol WinCE v.2.x");
	Элементы.НастройкиЛогическихКассФорматОбмена.СписокВыбора.Добавить("Frontol xPOS 1.5.x");
	Элементы.НастройкиЛогическихКассФорматОбмена.СписокВыбора.Добавить("Frontol xPOS 1.6.x");
	Элементы.НастройкиЛогическихКассФорматОбмена.СписокВыбора.Добавить("Frontol xPOS 1.7.x");
	
КонецПроцедуры

&НаСервере
Функция СтрПриВыгрузке(Строка)
	Результат	= СтрЗаменить(Строка,Символы.ПС,Символ(166));
	Результат	= СтрЗаменить(Результат,";",Символ(164));
	Результат	= СокрЛП(Результат);
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ВыгрузитьДанные(ФайлДанных,Данные,Формат)
	Если Формат = "Frontol Win32 v.4.x"  Тогда
		Для Каждого СтрокаДанных Из Данные Цикл
			Если СтрокаДанных.Номенклатура.ЭтоГруппа Тогда
				СтрокаВыгрузки	= "" 	+ СтрЗаменить(СтрокаДанных.Номенклатура.Код,"-","") + ";"		//1. Код
										+ ";"															//2. Штрихкоды
										+ СтрПриВыгрузке(СтрокаДанных.Номенклатура.Наименование) + ";"	//3. Наименование
										+ СтрПриВыгрузке(СтрокаДанных.Номенклатура.Наименование) + ";"	//4. Текст
										+ ";"															//5. Цена
										+ ";"															//6. Остаток
										+ ";"															//7. Код группы условий скидки
										+ ";"															//8. Флаги
										+ ";"															//9. Минимальная цена
										+ ";"															//10. Срок годности
										+ ";"															//11. Код схемы разрезов
										+ ";"															//12. Вариант использования разрезов
										+ ";"															//13. -
										+ ";"															//14. Коэффициент штрихкода
										+ ";"															//15. -
										+ ?(СтрокаДанных.Номенклатура.Родитель = Справочники.Номенклатура.ПустаяСсылка(),"",СтрЗаменить(СтрокаДанных.Номенклатура.Родитель.Код,"-","")) + ";"
																										//16. Код родительской группы
										+ "0" + ";";													//17. Товар или группа
										
			Иначе
				СтрокаВыгрузки	= "" 	+ СтрЗаменить(СтрокаДанных.КодPLU,Символы.НПП,"") + ";"			//1. Код PLU
										+ СтрокаДанных.Штрихкод + ";"									//2. Штрихкоды
										+ СтрПриВыгрузке(СтрокаДанных.Номенклатура.Наименование) + ";"	//3. Наименование
										+ СтрПриВыгрузке(СтрокаДанных.Номенклатура.Наименование) + ";"	//4. Текст
										+ СтрЗаменить(СтрокаДанных.Цена,Символы.НПП,"") + ";"			//5. Цена
										+ СтрЗаменить(СтрокаДанных.Остаток,Символы.НПП,"") + ";"		//6. Остаток
										+ ";"															//7. Код группы условий скидки
																										//8. Флаги
										+ "0,"															//8.1. Весовой
										+ "1,"															//8.2. Продажа
										+ "1,"															//8.3. Возврат
										+ "0,"															//8.4. Отрицательные остатки
										+ "1,"															//8.5. Без ввода количества
										+ "1,"															//8.6. Списание остатков
										+ "0,"															//8.7. Редактирование цены
										+ "1,"															//8.8. Ввод количества вручную
										+ "1,"															//8.9. Печатать в документе
										+ "0,"															//8.10. Наливаемый товар
										+ "0,"															//8.11. Скидки
										+ "0,"															//8.12. Запрос цены
										+ "0,"															//8.13. Запрос штрихкода
										+ "0" + ";"														//8.14.	Округление												
										+ ";"															//9. Минимальная цена
										+ ";"															//10. Срок годности
										+ ";"															//11. Код схемы разрезов
										+ ";"															//12. Вариант использования разрезов
										+ ";"															//13. -
										+ "1;"															//14. Коэффициент штрихкода
										+ ";"															//15. -
										+ ?(СтрокаДанных.Номенклатура.Родитель = Справочники.Номенклатура.ПустаяСсылка(),"",СтрЗаменить(СтрокаДанных.Номенклатура.Родитель.Код,"-","")) + ";"
																										//16. Код родительской группы
										+ "1" + ";"														//17. Товар или группа
										+ ";"															//18. -
										+ ";"															//19. -
										+ ";"															//20. Серия
										+ ";"															//21. Сертификат
										+ ";"															//22. -
										+ ";"															//23. Код налоговой группы
										+ ";"															//24. Код весов с ПЭ
										+ ";"															//25. Код в весах (!!!)
										+ СтрПриВыгрузке(СтрокаДанных.Номенклатура.Артикул) + ";"		//26. Артикул
										+ ";"															//27. Тип савки (для скидки)
										+ ";"															//28. Значение скидки
										+ ";"															//29. Максимальная скидка
										+ ";"															//30. -
										+ ";"															//31. Рисунок
										+ СтрПриВыгрузке(СтрокаДанных.Номенклатура.Описание) + ";"		//32. Описание
										+ "1;"															//33. Кратность количества
										+ ";"															//34. Код ценника
										+ ";"															//35. Тип вознаграждени
										+ ";"															//36. Значение вознаграждения
										+ ";"															//37. Номер секции ККМ
										+ ";"															//38. ГТД
										+ СтрокаДанных.КодГруппыПечатиЧека + ";"						//39. Код группы печати чека
										+ ";"															//40. Код группы печати копии
										+ ";"															//41. Код группы печати счета
										+ ";"															//42. Код группы печати марки
										+ ";"															//43. Код предприятия
										+ ";"															//44. -
										+ ";"															//45. Номер сообщения в весах с ПЭ
										+ ";"															//46. -
										+ ";"															//47. Визуальный подбор модификаторов при регистрации
										+ ";"															//48. Левая граница веса модификаторов
										+ ";"															//49. Правая граница
										+ ";"															//50. Текстовое соообщение для весов
										+ ";"															//51. -
										+ ";"															//52. -
										+ СтрокаДанных.Номенклатура.ВидАлкогольнойПродукции.Код + ";"	//53. Код вида алкогольной продукции
										+ СтрокаДанных.Номенклатура.ОбъемДАЛ * 10 + ";"					//54. Емкость
										+ ?(СтрокаДанных.Номенклатура.АлкогольнаяПродукция,1,0) + ";"	//55. Признак алкогольной продукции
										+ ?(СтрокаДанных.Номенклатура.ВидАлкогольнойПродукции.Маркируемый,0,1) + ";"
																										//56. Признаки маркируемого алкоголя
										+ СтрокаДанных.Номенклатура.Крепость;							//57. Крепость алкогольной продукции					
			КонецЕсли;
			ФайлДанных.ДобавитьСтроку(СтрокаВыгрузки);
		КонецЦикла;
	ИначеЕсли Формат = "Frontol v.5" Тогда
		    Для Каждого СтрокаДанных Из Данные Цикл
			Если СтрокаДанных.Номенклатура.ЭтоГруппа Тогда
				СтрокаВыгрузки	= "" 	+ СтрЗаменить(СтрокаДанных.Номенклатура.Код,"-","") + ";"		//1. Код
										+ ";"															//2. Штрихкоды
										+ СтрПриВыгрузке(СтрокаДанных.Номенклатура.Наименование) + ";"	//3. Наименование
										+ СтрПриВыгрузке(СтрокаДанных.Номенклатура.Наименование) + ";"	//4. Текст
										+ ";"															//5. Цена
										+ ";"															//6. Остаток
										+ ";"															//7. Код группы условий скидки
										+ ";"															//8. Флаги
										+ ";"															//9. Минимальная цена
										+ ";"															//10. Срок годности
										+ ";"															//11. Код схемы разрезов
										+ ";"															//12. Вариант использования разрезов
										+ ";"															//13. -
										+ ";"															//14. Коэффициент штрихкода
										+ ";"															//15. -
										+ ?(СтрокаДанных.Номенклатура.Родитель = Справочники.Номенклатура.ПустаяСсылка(),"",СтрЗаменить(СтрокаДанных.Номенклатура.Родитель.Код,"-","")) + ";"
																										//16. Код родительской группы
										+ "0" + ";";													//17. Товар или группа
										
			Иначе
				СтрокаВыгрузки	= "" 	+ СтрЗаменить(СтрокаДанных.КодPLU,Символы.НПП,"") + ";"			//1. Код PLU
										+ СтрокаДанных.Штрихкод + ";"									//2. Штрихкоды
										+ СтрПриВыгрузке(СтрокаДанных.Номенклатура.Наименование) + ";"	//3. Наименование
										+ СтрПриВыгрузке(СтрокаДанных.Номенклатура.Наименование) + ";"	//4. Текст
										+ СтрЗаменить(СтрокаДанных.Цена,Символы.НПП,"") + ";"			//5. Цена
										+ СтрЗаменить(СтрокаДанных.Остаток,Символы.НПП,"") + ";"		//6. Остаток
										+ ";"															//7. Код группы условий скидки
																										//8. Флаги
										+ "0,"															//8.1. Весовой
										+ "1,"															//8.2. Продажа
										+ "1,"															//8.3. Возврат
										+ "0,"															//8.4. Отрицательные остатки
										+ "1,"															//8.5. Без ввода количества
										+ "1,"															//8.6. Списание остатков
										+ "0,"															//8.7. Редактирование цены
										+ "1,"															//8.8. Ввод количества вручную
										+ "1,"															//8.9. Печатать в документе
										+ "0,"															//8.10. Наливаемый товар
										+ "0,"															//8.11. Скидки
										+ "0,"															//8.12. Запрос цены
										+ "0,"															//8.13. Запрос штрихкода
										+ "0" + ";"														//8.14.	Округление												
										+ ";"															//9. Минимальная цена
										+ ";"															//10. Срок годности
										+ ";"															//11. Код схемы разрезов
										+ ";"															//12. Вариант использования разрезов
										+ ";"															//13. -
										+ "1;"															//14. Коэффициент штрихкода
										+ ";"															//15. -
										+ ?(СтрокаДанных.Номенклатура.Родитель = Справочники.Номенклатура.ПустаяСсылка(),"",СтрЗаменить(СтрокаДанных.Номенклатура.Родитель.Код,"-","")) + ";"
																										//16. Код родительской группы
										+ "1" + ";"														//17. Товар или группа
										+ ";"															//18. -
										+ ";"															//19. -
										+ ";"															//20. Серия
										+ ";"															//21. Сертификат
										+ ";"															//22. -
										+ ";"															//23. Код налоговой группы
										+ ";"															//24. Код весов с ПЭ
										+ ";"															//25. Код в весах (!!!)
										+ СтрПриВыгрузке(СтрокаДанных.Номенклатура.Артикул) + ";"		//26. Артикул
										+ ";"															//27. Тип савки (для скидки)
										+ ";"															//28. Значение скидки
										+ ";"															//29. Максимальная скидка
										+ ";"															//30. -
										+ ";"															//31. Рисунок
										+ СтрПриВыгрузке(СтрокаДанных.Номенклатура.Описание) + ";"		//32. Описание
										+ "1;"															//33. Кратность количества
										+ ";"															//34. Код ценника
										+ ";"															//35. Тип вознаграждени
										+ ";"															//36. Значение вознаграждения
										+ ";"															//37. Номер секции ККМ
										+ ";"															//38. ГТД
										+ СтрокаДанных.КодГруппыПечатиЧека + ";"						//39. Код группы печати чека
										+ ";"															//40. Код группы печати копии
										+ ";"															//41. Код группы печати счета
										+ ";"															//42. Код группы печати марки
										+ ";"															//43. Код предприятия
										+ ";"															//44. -
										+ ";"															//45. Номер сообщения в весах с ПЭ
										+ ";"															//46. -
										+ ";"															//47. Визуальный подбор модификаторов при регистрации
										+ ";"															//48. Левая граница веса модификаторов
										+ ";"															//49. Правая граница
										+ ";"															//50. Текстовое соообщение для весов
										
										// дальше пока нет данных 
										
										
										
										+ ";"															//51. -
										+ ";"															//52. -
										+ СтрокаДанных.Номенклатура.ВидАлкогольнойПродукции.Код + ";"	//53. Код вида алкогольной продукции
										+ СтрокаДанных.Номенклатура.ОбъемДАЛ * 10 + ";"					//54. Емкость
										+ ?(СтрокаДанных.Номенклатура.АлкогольнаяПродукция,1,0) + ";"	//55. Признак алкогольной продукции
										+ ?(СтрокаДанных.Номенклатура.ВидАлкогольнойПродукции.Маркируемый,0,1) + ";"
																										//56. Признаки маркируемого алкоголя
										+ СтрокаДанных.Номенклатура.Крепость;							//57. Крепость алкогольной продукции					
			КонецЕсли;
			ФайлДанных.ДобавитьСтроку(СтрокаВыгрузки);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьНаСервере()
//Записываем нужные файлы
	Отбор	= Новый Структура;
	Отбор.Вставить("Выбран",Истина);	
	
	МассивЛогическихКассДляВыгрузки	= НастройкаЛогическихКасс.НайтиСтроки(Отбор);
	Для Каждого ЛогКасса Из МассивЛогическихКассДляВыгрузки Цикл
		
			
	ФайлДанных	= Новый ТекстовыйДокумент;
	
	//Записываем заголовок
	ФайлДанных.ДобавитьСтроку("##@@&&");
	ФайлДанных.ДобавитьСтроку("#");
	ФайлДанных.ДобавитьСтроку("$$$DELETEALLWARES");
	
	Запрос	= Новый Запрос("ВЫБРАТЬ
	      	               |	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура КАК Номенклатура,
	      	               |	КодыТоваровПодключаемогоОборудованияOffline.Код КАК КодPLU,
	      	               |	ЦеныНоменклатурыСрезПоследних.Цена,
	      	               |	ШтрихкодыНоменклатуры.Штрихкод,
	      	               |	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК Остаток,
	      	               |	&КодГруппыПечатиЧека
	      	               |ИЗ
	      	               |	РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	      	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	      	               |		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	      	               |			И КодыТоваровПодключаемогоОборудованияOffline.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	      	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	      	               |		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	      	               |			И КодыТоваровПодключаемогоОборудованияOffline.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	      	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад = &Склад) КАК ТоварыНаСкладахОстатки
	      	               |		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	      	               |			И КодыТоваровПодключаемогоОборудованияOffline.Характеристика = ТоварыНаСкладахОстатки.Характеристика
	      	               |ГДЕ
	      	               |	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура В ИЕРАРХИИ(&Номенклатура)
	      	               |ИТОГИ ПО
	      	               |	Номенклатура ТОЛЬКО ИЕРАРХИЯ");	
	Запрос.УстановитьПараметр("ВидЦены",ЛогКасса.СкладКассы.РозничныйВидЦены);					   
	Запрос.УстановитьПараметр("Склад",ЛогКасса.СкладКассы);
	
	КассыККМДляРаспределения	= НастройкаРаспределенияНоменклатуры.Выгрузить(,"КассаККМ");
	КассыККМДляРаспределения.Свернуть("КассаККМ");
	
	Для Каждого СтрокаКассаККМ Из КассыККМДляРаспределения Цикл
		ОтборПоКассеККМ	= Новый Структура;
		ОтборПоКассеККМ.Вставить("КассаККМ",СтрокаКассаККМ.КассаККМ);
		
		МассивНоменклатурыДляВыгрузки	= НастройкаРаспределенияНоменклатуры.Выгрузить(ОтборПоКассеККМ,"Номенклатура").ВыгрузитьКолонку("Номенклатура");
		
		Запрос.УстановитьПараметр("Номенклатура",МассивНоменклатурыДляВыгрузки);
		Запрос.УстановитьПараметр("КодГруппыПечатиЧека",СтрокаКассаККМ.КассаККМ.РегистрационныйНомер);
		
		ВыгрузитьДанные(ФайлДанных,Запрос.Выполнить().Выгрузить(),ЛогКасса.ФорматОбмена);
	КонецЦикла;
	
	//Теперь выгружаем все, что не попало в фильтр
	МассивНоменклатурыДляВыгрузки	= НастройкаРаспределенияНоменклатуры.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура");
	Запрос.Текст	= СтрЗаменить(Запрос.Текст,"В ИЕРАРХИИ","НЕ В ИЕРАРХИИ");
	Запрос.УстановитьПараметр("Номенклатура",МассивНоменклатурыДляВыгрузки);
	Запрос.УстановитьПараметр("КодГруппыПечатиЧека",КассаККМПоУмолчанию.РегистрационныйНомер);
	
	ВыгрузитьДанные(ФайлДанных,Запрос.Выполнить().Выгрузить(),ЛогКасса.ФорматОбмена);	

		
		
		ФайлДанных.Записать(ЛогКасса.КаталогОбмена + "\" + ЛогКасса.ФайлВыгрузки,КодировкаТекста.ANSI);
		ФайлДанных.Записать(ЛогКасса.КаталогОбмена + "\" + ЛогКасса.ФлагВыгрузки,КодировкаТекста.ANSI);
		Сообщить("Переданы данные для кассы: " + ЛогКасса.Наименование);
	КонецЦикла;

	
	
	
	КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	ВыгрузитьНаСервере();
КонецПроцедуры

&НаСервере
Функция НайтиНоменклатуруПоPLU(PLU)
	Запрос	= Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	      	               |	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура,
	      	               |	КодыТоваровПодключаемогоОборудованияOffline.Характеристика,
	      	               |	КодыТоваровПодключаемогоОборудованияOffline.Упаковка
	      	               |ИЗ
	      	               |	РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	      	               |ГДЕ
	      	               |	КодыТоваровПодключаемогоОборудованияOffline.Код = &Код");
	Запрос.УстановитьПараметр("Код",PLU);
	Результат	= Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество()	= 0 Тогда
		Сообщить("Не найден товар с PLU-кодом " + PLU);
		Возврат Неопределено;
	Иначе
		Возврат Результат[0];
	КонецЕсли;
КонецФункции

&НаСервере
Процедура СформироватьОтчетОРозничныхПродажах(Товары,Оплаты,ЛогическаяКасса)
	ДокОтчет	= Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
	ДокОтчет.Валюта		= Константы.ВалютаРегламентированногоУчета.Получить();
	ДокОтчет.ВидЦены	= Склад.РозничныйВидЦены;
	ДокОтчет.Дата		= Дата(Товары[Товары.Количество()-1].Дата);
	ДокОтчет.КассаККМ	= Справочники.КассыККМ.НайтиПоРеквизиту("РегистрационныйНомер",Товары[0].КодГруппыПечатиЧека).Ссылка;
	ДокОтчет.Комментарий	= "Касса: " + ЛогическаяКасса + " Смена №" + Товары[0].Смена + " (" + Товары[0].Дата + " - " + ДокОтчет.Дата + ")";
	ДокОтчет.Организация	= ДокОтчет.КассаККМ.Владелец.Ссылка;
	ДокОтчет.Склад			= Склад.Ссылка;
	ДокОтчет.НалогообложениеНДС	= Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС; 
	
	Товары.Свернуть("КодPLU","Количество, СуммаСоСкидкой, СуммаБезСкидок");
	Для Каждого СтрТовары Из Товары Цикл
		ПараметрыНоменклатуры	= НайтиНоменклатуруПоPLU(СтрТовары.КодPLU);
		Если ПараметрыНоменклатуры = Неопределено ИЛИ СтрТовары.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТовары	= ДокОтчет.Товары.Добавить();
		
		НоваяСтрокаТовары.Номенклатура			= ПараметрыНоменклатуры.Номенклатура;
		НоваяСтрокаТовары.Количество			= СтрТовары.Количество;
		НоваяСтрокаТовары.КоличествоУпаковок	= СтрТовары.Количество;
		НоваяСтрокаТовары.СтавкаНДС				= Перечисления.СтавкиНДС.БезНДС;
		НоваяСтрокаТовары.Сумма					= СтрТовары.СуммаСоСкидкой;
		НоваяСтрокаТовары.СуммаРучнойСкидки		= СтрТовары.СуммаБезСкидок - СтрТовары.СуммаСоСкидкой;
		НоваяСтрокаТовары.Упаковка				= ПараметрыНоменклатуры.Упаковка;
		НоваяСтрокаТовары.Характеристика		= ПараметрыНоменклатуры.Характеристика;
		НоваяСтрокаТовары.Цена					= СтрТовары.СуммаБезСкидок / СтрТовары.Количество;
	КонецЦикла;
	
	ДокОтчет.Записать(РежимЗаписиДокумента.Запись);
	Сообщить("Сформирован " + ДокОтчет.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНаСервере()
	ФайлДанных	= Новый ТекстовыйДокумент;

	Отбор	= Новый Структура;
	Отбор.Вставить("Выбран",Истина);	
	
	МассивЛогическихКассДляЗагрузки	= НастройкаЛогическихКасс.НайтиСтроки(Отбор);
	Для Каждого ТекущаяКасса Из МассивЛогическихКассДляЗагрузки Цикл		
		ФайлДанных.Прочитать(ТекущаяКасса.КаталогОбмена + "\" + ТекущаяКасса.ФайлЗагрузки,КодировкаТекста.ANSI);
		Если ФайлДанных.ПолучитьСтроку(1) = "@" Тогда
			Сообщить("Файл данных для кассы " + ТекущаяКасса.Наименование + " уже был загружен ранее!");
			Продолжить;
		Иначе
			Сообщить("Загрузка данных кассы " + ТекущаяКасса.Наименование + "...");
		КонецЕсли;
		
		БезОшибок	= Истина;
		
		Товары	= Новый ТаблицаЗначений;
		Товары.Колонки.Добавить("Смена");
		Товары.Колонки.Добавить("Чек");
		Товары.Колонки.Добавить("Дата");
		Товары.Колонки.Добавить("КодPLU");
		Товары.Колонки.Добавить("Количество");
		Товары.Колонки.Добавить("СуммаБезСкидок");
		Товары.Колонки.Добавить("СуммаСоСкидкой");
		Товары.Колонки.Добавить("КодГруппыПечатиЧека");
		
		Оплаты	= Новый ТаблицаЗначений;
		Оплаты.Колонки.Добавить("Смена");
		Оплаты.Колонки.Добавить("Чек");
		Оплаты.Колонки.Добавить("КодВидаОплаты");
		Оплаты.Колонки.Добавить("КодГруппыПечатиЧека");
		Оплаты.Колонки.Добавить("Сумма");
		Для НомерСтроки	= 4 По ФайлДанных.КоличествоСтрок() Цикл
			СтрФайла	= СтрЗаменить(ФайлДанных.ПолучитьСтроку(НомерСтроки),";",Символы.ПС);
			ТипТранзакции	= СтрПолучитьСтроку(СтрФайла,4);
			Если 		ТипТранзакции	= "11" Тогда	//Регистрация
				НоваяСтрокаДанных	= Товары.Добавить();
				Попытка
					НоваяСтрокаДанных.Смена					= Число(СтрПолучитьСтроку(СтрФайла,14));
					НоваяСтрокаДанных.Чек					= Число(СтрПолучитьСтроку(СтрФайла,6));
					НоваяСтрокаДанных.КодPLU				= Число(СтрПолучитьСтроку(СтрФайла,8));
					НоваяСтрокаДанных.Количество			= Число(СтрПолучитьСтроку(СтрФайла,11));
					НоваяСтрокаДанных.СуммаСоСкидкой		= Число(СтрПолучитьСтроку(СтрФайла,16));
					НоваяСтрокаДанных.СуммаБезСкидок		= Число(СтрПолучитьСтроку(СтрФайла,20));
					НоваяСтрокаДанных.КодГруппыПечатиЧека	= СтрПолучитьСтроку(СтрФайла,17);
				Исключение
					Сообщить("Ошибка в строке " + НомерСтроки);
					БезОшибок	= Ложь;
				КонецПопытки;
			ИначеЕсли   ТипТранзакции	= "2" ИЛИ ТипТранзакции = "12" Тогда	//Сторно позиции
				НоваяСтрокаДанных	= Товары.Добавить();
				Попытка
					НоваяСтрокаДанных.Смена					= Число(СтрПолучитьСтроку(СтрФайла,14));
					НоваяСтрокаДанных.Чек					= Число(СтрПолучитьСтроку(СтрФайла,6));
					НоваяСтрокаДанных.КодPLU				= Число(СтрПолучитьСтроку(СтрФайла,8));
					НоваяСтрокаДанных.Количество			= Число(СтрПолучитьСтроку(СтрФайла,11));
					НоваяСтрокаДанных.СуммаСоСкидкой		= Число(СтрПолучитьСтроку(СтрФайла,16));
					НоваяСтрокаДанных.СуммаБезСкидок		= Число(СтрПолучитьСтроку(СтрФайла,20));
					НоваяСтрокаДанных.КодГруппыПечатиЧека	= СтрПолучитьСтроку(СтрФайла,17);
				Исключение
					Сообщить("Ошибка в строке " + НомерСтроки);
					БезОшибок	= Ложь;
				КонецПопытки;
			ИначеЕсли	ТипТранзакции	= "43" Тогда	//Распределение видов оплаты
				НоваяСтрокаОплаты	= Оплаты.Добавить();
				Попытка
					НоваяСтрокаОплаты.Смена					= Число(СтрПолучитьСтроку(СтрФайла,14));
					НоваяСтрокаОплаты.Чек					= Число(СтрПолучитьСтроку(СтрФайла,6));
					НоваяСтрокаОплаты.КодВидаОплаты			= СтрПолучитьСтроку(СтрФайла,9);
					НоваяСтрокаОплаты.КодГруппыПечатиЧека	= СтрПолучитьСтроку(СтрФайла,17);
					НоваяСтрокаОплаты.Сумма					= Число(СтрПолучитьСтроку(СтрФайла,12));
				Исключение
					Сообщить("Ошибка в строке " + НомерСтроки);
					БезОшибок	= Ложь;
				КонецПопытки;
			ИначеЕсли	ТипТранзакции	= "55" Тогда	// Закрытие чека
				Попытка
					Отбор	= Новый Структура;
					Отбор.Вставить("Смена",Число(СтрПолучитьСтроку(СтрФайла,14)));
					Отбор.Вставить("Чек",Число(СтрПолучитьСтроку(СтрФайла,6)));
					
					ЗакрытыйЧек	= Товары.НайтиСтроки(Отбор);
					Для Каждого СтрокаЗакрытогоЧека Из ЗакрытыйЧек Цикл
						СтрокаЗакрытогоЧека.Дата	= СтрПолучитьСтроку(СтрФайла,2) + " " + СтрПолучитьСтроку(СтрФайла,3);
					КонецЦикла;
				Исключение
					Сообщить("Ошибка в строке " + НомерСтроки);
					БезОшибок	= Ложь;
				КонецПопытки;
			ИначеЕсли	ТипТранзакции	= "56" Тогда	// Отмена чека
				Попытка
					Отбор	= Новый Структура;
					Отбор.Вставить("Смена",Число(СтрПолучитьСтроку(СтрФайла,14)));
					Отбор.Вставить("Чек",Число(СтрПолучитьСтроку(СтрФайла,6)));
					
					ОтменяемыйЧек	= Товары.НайтиСтроки(Отбор);
					Для Каждого СтрокаОтменяемогоЧека Из ОтменяемыйЧек Цикл
						Товары.Удалить(СтрокаОтменяемогоЧека);
					КонецЦикла;
				Исключение
					Сообщить("Ошибка в строке " + НомерСтроки);
					БезОшибок	= Ложь;
				КонецПопытки;
			Иначе//Ненужные или неизвестные транзакции
			КонецЕсли;
		КонецЦикла;	//Разбор файла
		
		Если БезОшибок Тогда
			Смены	= Товары.Скопировать(,"Смена");
			Смены.Свернуть("Смена");	//Получаем список смен в файле
			Для Каждого Смена Из Смены.ВыгрузитьКолонку("Смена") Цикл	//Перебор смен в текущем файле
				Отбор	= Новый Структура;
				Отбор.Вставить("Смена",Смена);
				КодыГруппыПечатиЧека	= Товары.Скопировать(Отбор,"КодГруппыПечатиЧека");
				КодыГруппыПечатиЧека.Свернуть("КодГруппыПечатиЧека");	//Получаем список Групп печати в смене
				Для Каждого КодГруппыПечатиЧека Из КодыГруппыПечатиЧека.ВыгрузитьКолонку("КодГруппыПечатиЧека") Цикл	//Перебор по Группам печати в смене
					Отбор.Вставить("КодГруппыПечатиЧека",КодГруппыПечатиЧека);
					ТоварыВСменеПоГруппеПечати	= Товары.Скопировать(Отбор);	//Получаем товары в нужной Смене по нужной Группе печати
					ОплатыВСменеПоГруппеПечати	= Оплаты.Скопировать(Отбор);	//Получаем оплаты в нужной Смене по нудной Группе печати
					ОплатыВСменеПоГруппеПечати.Свернуть("КодВидаОплаты","Сумма");
					
					СформироватьОтчетОРозничныхПродажах(ТоварыВСменеПоГруппеПечати,ОплатыВСменеПоГруппеПечати,ТекущаяКасса.Наименование);
				КонецЦикла;	//Перебор Кодов группы печати в Смене
			КонецЦикла;	//Перебор Смен в файле
			
			ФайлДанных.ЗаменитьСтроку(1,"@");
			ФайлДанных.Записать(ТекущаяКасса.КаталогОбмена + "\" + ТекущаяКасса.ФайлЗагрузки,КодировкаТекста.ANSI);
		КонецЕсли;	// Если БезОшибок
	КонецЦикла;	//Перебор касс	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	ЗагрузитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройкиПриИзменении(Элемент)
	УправлениеИнтерфейсом();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	Для Каждого СтрокаТЧ Из НастройкаЛогическихКасс Цикл
		СтрокаТЧ.Выбран	= Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыборВсех(Команда)
	Для Каждого СтрокаТЧ Из НастройкаЛогическихКасс Цикл
		СтрокаТЧ.Выбран	= Ложь;
	КонецЦикла;
КонецПроцедуры
