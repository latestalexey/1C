
&НаКлиенте
Процедура НастройкиЛогическихКассКаталогОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДиалогВыбора	= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбора.Каталог	= Элементы.НастройкиЛогическихКасс.ТекущиеДанные.КаталогОбмена;
	ДиалогВыбора.Заголовок	= "Каталог обмена с " + Элементы.НастройкиЛогическихКасс.ТекущиеДанные.Наименование;
	
	Если ДиалогВыбора.Выбрать() Тогда
		Элементы.НастройкиЛогическихКасс.ТекущиеДанные.КаталогОбмена	= ДиалогВыбора.Каталог;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокКасс()
	Элементы.ЛогическаяКассаДляВыгрузки.СписокВыбора.Очистить();
	Элементы.ЛогическаяКассаДляЗагрузки.СписокВыбора.Очистить();
	Для Каждого ЛогКасса Из НастройкаЛогическихКасс Цикл
		Элементы.ЛогическаяКассаДляВыгрузки.СписокВыбора.Добавить(ЛогКасса.Наименование);
		Элементы.ЛогическаяКассаДляЗагрузки.СписокВыбора.Добавить(ЛогКасса.Наименование);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗаполнитьСписокКасс();
	ПрогрузитьВсеКассыПриИзменении(Истина);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЛогическихКассПриИзменении(Элемент)
	ЗаполнитьСписокКасс();
КонецПроцедуры

&НаКлиенте
Процедура ПрогрузитьВсеКассыПриИзменении(Элемент)
	Элементы.ЛогическаяКассаДляВыгрузки.Доступность	= НЕ ПрогрузитьВсеКассы;
КонецПроцедуры

&НаСервере
Функция СтрПриВыгрузке(Строка)
	Результат	= СтрЗаменить(Строка,Символы.ПС,Символ(166));
	Результат	= СтрЗаменить(Результат,";",Символ(164));
	Результат	= СокрЛП(Результат);
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ВыгрузитьДанные(ФайлДанных,Данные)
	Для Каждого СтрокаДанных Из Данные Цикл
		Если СтрокаДанных.Номенклатура.ЭтоГруппа Тогда
			СтрокаВыгрузки	= "" 	+ СтрЗаменить(СтрокаДанных.Номенклатура.Код,"-","") + ";"		//1. Код
									+ ";"															//2. Штрихкоды
									+ СтрПриВыгрузке(СтрокаДанных.Номенклатура.Наименование) + ";"	//3. Наименование
									+ СтрПриВыгрузке(СтрокаДанных.Номенклатура.Наименование) + ";"	//4. Текст
									+ ";"															//5. Цена
									+ ";"															//6. Остаток
									+ ";"															//7. Код группы условий скидки
									+ ";"															//8. Флаги
									+ ";"															//9. Минимальная цена
									+ ";"															//10. Срок годности
									+ ";"															//11. Код схемы разрезов
									+ ";"															//12. Вариант использования разрезов
									+ ";"															//13. -
									+ ";"															//14. Коэффициент штрихкода
									+ ";"															//15. -
									+ ?(СтрокаДанных.Номенклатура.Родитель = Справочники.Номенклатура.ПустаяСсылка(),"",СтрЗаменить(СтрокаДанных.Номенклатура.Родитель.Код,"-","")) + ";"
																									//16. Код родительской группы
									+ "0" + ";";													//17. Товар или группа
									
		Иначе
			СтрокаВыгрузки	= "" 	+ СтрЗаменить(СтрокаДанных.КодPLU,Символы.НПП,"") + ";"			//1. Код PLU
									+ СтрокаДанных.Штрихкод + ";"									//2. Штрихкоды
									+ СтрПриВыгрузке(СтрокаДанных.Номенклатура.Наименование) + ";"	//3. Наименование
									+ СтрПриВыгрузке(СтрокаДанных.Номенклатура.Наименование) + ";"	//4. Текст
									+ СтрЗаменить(СтрокаДанных.Цена,Символы.НПП,"") + ";"			//5. Цена
									+ СтрЗаменить(СтрокаДанных.Остаток,Символы.НПП,"") + ";"		//6. Остаток
									+ ";"															//7. Код группы условий скидки
																									//8. Флаги
									+ "0,"															//8.1. Весовой
									+ "1,"															//8.2. Продажа
									+ "1,"															//8.3. Возврат
									+ "0,"															//8.4. Отрицательные остатки
									+ "1,"															//8.5. Без ввода количества
									+ "1,"															//8.6. Списание остатков
									+ "0,"															//8.7. Редактирование цены
									+ "1,"															//8.8. Ввод количества вручную
									+ "1,"															//8.9. Печатать в документе
									+ "0,"															//8.10. Наливаемый товар
									+ "0,"															//8.11. Скидки
									+ "0,"															//8.12. Запрос цены
									+ "0,"															//8.13. Запрос штрихкода
									+ "0" + ";"														//8.14.	Округление												
									+ ";"															//9. Минимальная цена
									+ ";"															//10. Срок годности
									+ ";"															//11. Код схемы разрезов
									+ ";"															//12. Вариант использования разрезов
									+ ";"															//13. -
									+ "1;"															//14. Коэффициент штрихкода
									+ ";"															//15. -
									+ ?(СтрокаДанных.Номенклатура.Родитель = Справочники.Номенклатура.ПустаяСсылка(),"",СтрЗаменить(СтрокаДанных.Номенклатура.Родитель.Код,"-","")) + ";"
																									//16. Код родительской группы
									+ "1" + ";"														//17. Товар или группа
									+ ";"															//18. -
									+ ";"															//19. -
									+ ";"															//20. Серия
									+ ";"															//21. Сертификат
									+ ";"															//22. -
									+ ";"															//23. Код налоговой группы
									+ ";"															//24. Код весов с ПЭ
									+ ";"															//25. Код в весах (!!!)
									+ СтрПриВыгрузке(СтрокаДанных.Номенклатура.Артикул) + ";"		//26. Артикул
									+ ";"															//27. Тип савки (для скидки)
									+ ";"															//28. Значение скидки
									+ ";"															//29. Максимальная скидка
									+ ";"															//30. -
									+ ";"															//31. Рисунок
									+ СтрПриВыгрузке(СтрокаДанных.Номенклатура.Описание) + ";"		//32. Описание
									+ "1;"															//33. Кратность количества
									+ ";"															//34. Код ценника
									+ ";"															//35. Тип вознаграждени
									+ ";"															//36. Значение вознаграждения
									+ ";"															//37. Номер секции ККМ
									+ ";"															//38. ГТД
									+ СтрокаДанных.КодГруппыПечатиЧека + ";"						//39. Код группы печати чека
									+ ";"															//40. Код группы печати копии
									+ ";"															//41. Код группы печати счета
									+ ";"															//42. Код группы печати марки
									+ ";"															//43. Код предприятия
									+ ";"															//44. -
									+ ";"															//45. Номер сообщения в весах с ПЭ
									+ ";"															//46. -
									+ ";"															//47. Визуальный подбор модификаторов при регистрации
									+ ";"															//48. Левая граница веса модификаторов
									+ ";"															//49. Правая граница
									+ ";"															//50. Текстовое соообщение для весов
									+ ";"															//51. -
									+ ";"															//52. -
									+ СтрокаДанных.Номенклатура.ВидАлкогольнойПродукции.Код + ";"	//53. Код вида алкогольной продукции
									+ СтрокаДанных.Номенклатура.ОбъемДАЛ * 10 + ";"					//54. Емкость
									+ ?(СтрокаДанных.Номенклатура.АлкогольнаяПродукция,1,0) + ";"	//55. Признак алкогольной продукции
									+ ?(СтрокаДанных.Номенклатура.ВидАлкогольнойПродукции.Маркируемый,0,1) + ";"
																									//56. Признаки маркируемого алкоголя
									+ СтрокаДанных.Номенклатура.Крепость;							//57. Крепость алкогольной продукции					
		КонецЕсли;
		ФайлДанных.ДобавитьСтроку(СтрокаВыгрузки);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьНаСервере()
	ФайлДанных	= Новый ТекстовыйДокумент;
	
	//Записываем заголовок
	ФайлДанных.ДобавитьСтроку("##@@&&");
	ФайлДанных.ДобавитьСтроку("#");
	ФайлДанных.ДобавитьСтроку("$$$DELETEALLWARES");
	
	Запрос	= Новый Запрос("ВЫБРАТЬ
	      	               |	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура КАК Номенклатура,
	      	               |	КодыТоваровПодключаемогоОборудованияOffline.Код КАК КодPLU,
	      	               |	ЦеныНоменклатурыСрезПоследних.Цена,
	      	               |	ШтрихкодыНоменклатуры.Штрихкод,
	      	               |	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК Остаток,
	      	               |	&КодГруппыПечатиЧека
	      	               |ИЗ
	      	               |	РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	      	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	      	               |		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	      	               |			И КодыТоваровПодключаемогоОборудованияOffline.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	      	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	      	               |		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	      	               |			И КодыТоваровПодключаемогоОборудованияOffline.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	      	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад = &Склад) КАК ТоварыНаСкладахОстатки
	      	               |		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	      	               |			И КодыТоваровПодключаемогоОборудованияOffline.Характеристика = ТоварыНаСкладахОстатки.Характеристика
	      	               |ГДЕ
	      	               |	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура В ИЕРАРХИИ(&Номенклатура)
	      	               |ИТОГИ ПО
	      	               |	Номенклатура ТОЛЬКО ИЕРАРХИЯ");	
	Запрос.УстановитьПараметр("ВидЦены",Склад.РозничныйВидЦены);					   
	Запрос.УстановитьПараметр("Склад",Склад);
	
	КассыККМДляРаспределения	= НастройкаРаспределенияНоменклатуры.Выгрузить(,"КассаККМ");
	КассыККМДляРаспределения.Свернуть("КассаККМ");
	
	Для Каждого СтрокаКассаККМ Из КассыККМДляРаспределения Цикл
		ОтборПоКассеККМ	= Новый Структура;
		ОтборПоКассеККМ.Вставить("КассаККМ",СтрокаКассаККМ.КассаККМ);
		
		МассивНоменклатурыДляВыгрузки	= НастройкаРаспределенияНоменклатуры.Выгрузить(ОтборПоКассеККМ,"Номенклатура").ВыгрузитьКолонку("Номенклатура");
		
		Запрос.УстановитьПараметр("Номенклатура",МассивНоменклатурыДляВыгрузки);
		Запрос.УстановитьПараметр("КодГруппыПечатиЧека",СтрокаКассаККМ.КассаККМ.РегистрационныйНомер);
		
		ВыгрузитьДанные(ФайлДанных,Запрос.Выполнить().Выгрузить());
	КонецЦикла;
	
	//Теперь выгружаем все, что не попало в фильтр
	МассивНоменклатурыДляВыгрузки	= НастройкаРаспределенияНоменклатуры.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура");
	Запрос.Текст	= СтрЗаменить(Запрос.Текст,"В ИЕРАРХИИ","НЕ В ИЕРАРХИИ");
	Запрос.УстановитьПараметр("Номенклатура",МассивНоменклатурыДляВыгрузки);
	Запрос.УстановитьПараметр("КодГруппыПечатиЧека",КассаККМПоУмолчанию.РегистрационныйНомер);
	
	ВыгрузитьДанные(ФайлДанных,Запрос.Выполнить().Выгрузить());	
	
	//Записываем нужные файлы
	Отбор	= Новый Структура;
	Если НЕ ПрогрузитьВсеКассы Тогда
		Отбор.Вставить("Наименование",ЛогическаяКассаДляВыгрузки);	
	КонецЕсли;
	
	МассивЛогическихКассДляВыгрузки	= НастройкаЛогическихКасс.НайтиСтроки(Отбор);
	Для Каждого ЛогКасса Из МассивЛогическихКассДляВыгрузки Цикл
		ФайлДанных.Записать(ЛогКасса.КаталогОбмена + "\" + ЛогКасса.ФайлВыгрузки,КодировкаТекста.ANSI);
		Сообщить("Переданы данные для кассы: " + ЛогКасса.Наименование);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	Если ПрогрузитьВсеКассы ИЛИ ЗначениеЗаполнено(ЛогическаяКассаДляВыгрузки) Тогда  
		ВыгрузитьНаСервере();
	Иначе
		Сообщить("Укажите кассу для выгрузки!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСоВсехКассПриИзменении(Элемент)
	Элементы.ЛогическаяКассаДляЗагрузки.Доступность	= НЕ ЗагрузитьСоВсехКасс;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНаСервере()
	ФайлДанных	= Новый ТекстовыйДокумент;
	
	Для Каждого ТекущаяКасса Из НастройкаЛогическихКасс Цикл
		Если НЕ ЗагрузитьСоВсехКасс И НЕ ТекущаяКасса.Наименование = ЛогическаяКассаДляЗагрузки Тогда
			Продолжить;
		КонецЕсли;
		
		ФайлДанных.Прочитать(ТекущаяКасса.КаталогОбмена + "\" + ТекущаяКасса.ФайлЗагрузки,КодировкаТекста.ANSI);
		
		БезОшибок	= Истина;
		
		Данные	= Новый ТаблицаЗначений;
		Данные.Колонки.Добавить("Смена");
		Данные.Колонки.Добавить("Чек");
		Данные.Колонки.Добавить("Дата");
		Данные.Колонки.Добавить("КодPLU");
		Данные.Колонки.Добавить("Количество");
		Данные.Колонки.Добавить("Цена");
		Данные.Колонки.Добавить("СуммаСоСкидкой");
		Данные.Колонки.Добавить("КодГруппыПечатиЧека");
		
		Для НомерСтроки	= 4 По ФайлДанных.КоличествоСтрок() Цикл
			СтрФайла	= СтрЗаменить(ФайлДанных.ПолучитьСтроку(НомерСтроки),";",Символы.ПС);
			ТипТранзакции	= СтрПолучитьСтроку(СтрФайла,4);
			Если 		ТипТранзакции	= "11" Тогда	//Регистрация
				НоваяСтрокаДанных	= Данные.Добавить();
				Попытка
					НоваяСтрокаДанных.Смена					= Число(СтрПолучитьСтроку(СтрФайла,14));
					НоваяСтрокаДанных.Чек					= Число(СтрПолучитьСтроку(СтрФайла,6));
					НоваяСтрокаДанных.Дата					= СтрПолучитьСтроку(СтрФайла,2) + " " + СтрПолучитьСтроку(СтрФайла,3);
					НоваяСтрокаДанных.КодPLU				= СтрПолучитьСтроку(СтрФайла,8);
					НоваяСтрокаДанных.Количество			= Число(СтрПолучитьСтроку(СтрФайла,11));
					НоваяСтрокаДанных.СуммаСоСкидкой		= Число(СтрПолучитьСтроку(СтрФайла,16));
					НоваяСтрокаДанных.СуммаБезСкидок		= Число(СтрПолучитьСтроку(СтрФайла,20));
					НоваяСтрокаДанных.КодГруппыПечатиЧека	= СтрПолучитьСтроку(СтрФайла,17);
				Исключение
					Сообщить("Ошибка в строке " + НомерСтроки);
					БезОшибок	= Ложь;
				КонецПопытки;
			ИначеЕсли   ТипТранзакции	= "2" ИЛИ ТипТранзакции = "12" Тогда	//Сторно позиции
				НоваяСтрокаДанных	= Данные.Добавить();
				Попытка
					НоваяСтрокаДанных.Смена					= Число(СтрПолучитьСтроку(СтрФайла,14));
					НоваяСтрокаДанных.Чек					= Число(СтрПолучитьСтроку(СтрФайла,6));
					НоваяСтрокаДанных.Дата					= СтрПолучитьСтроку(СтрФайла,2) + " " + СтрПолучитьСтроку(СтрФайла,3);
					НоваяСтрокаДанных.КодPLU				= СтрПолучитьСтроку(СтрФайла,8);
					НоваяСтрокаДанных.Количество			= Число(СтрПолучитьСтроку(СтрФайла,11));
					НоваяСтрокаДанных.СуммаСоСкидкой		= Число(СтрПолучитьСтроку(СтрФайла,16));
					НоваяСтрокаДанных.СуммаБезСкидок		= Число(СтрПолучитьСтроку(СтрФайла,20));
					НоваяСтрокаДанных.КодГруппыПечатиЧека	= СтрПолучитьСтроку(СтрФайла,17);
				Исключение
					Сообщить("Ошибка в строке " + НомерСтроки);
					БезОшибок	= Ложь;
				КонецПопытки;
			Иначе
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
КонецПроцедуры


&НаКлиенте
Процедура Загрузить(Команда)
	Если ЗагрузитьСоВсехКасс ИЛИ ЗначениеЗаполнено(ЛогическаяКассаДляЗагрузки) Тогда  
		ЗагрузитьНаСервере();
	Иначе
		Сообщить("Укажите кассу для загрузки!");
	КонецЕсли;
КонецПроцедуры
